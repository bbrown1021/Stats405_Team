paste0(
"
select time_signature
, avg(danceability) avg_danceability
, avg(acousticness) avg_acousticness
, avg(energy) avg_energy
, count(*) count_tracks
, SUM(hit) count_hits
, SUM(hit)/count(*) as percentage_hit
FROM music
group by time_signature
order by count_tracks desc
")
df3 <- dbGetQuery(con, qstr)
colnames(df3) <- c("Time Signature", "Average Danceability", "Average Acousticness", "Average Energy", "Number of Tracks", "Number of Hits", "Percentage of Hit Tracks")
df3 <- t(df3)
df3
df3 <- dbGetQuery(con, qstr)
colnames(df3) <- c("Time Signature", "Average Danceability", "Average Acousticness", "Average Energy", "Number of Tracks", "Number of Hits", "Percentage of Hit Tracks")
df3
df3
as.character(df3$`Time Signature`)
df3$`Time Signature` <- as.character(df3$`Time Signature`)
df3
df3 <- t(df3)
df3
citation(corrplot)
citation("corrplot")
citation("wordcloud2")
# Helper functions to get mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Hot-100 tracks
qstr <- paste0("SELECT track, sections FROM music WHERE hit = 1 ")
hot_sections <- dbGetQuery(con, qstr)
hist(hot_sections$sections, main = "Histgram of hot #sections", xlab = "Number of sections")
getmode(hot_sections$sections)
# Hot-100 tracks
qstr <- paste0("SELECT track, sections FROM music WHERE hit = 1 ")
hot_sections <- dbGetQuery(con, qstr)
head(hot_sections)
hist(hot_sections$sections, main = "Histgram of hot #sections", xlab = "Number of sections")
getmode(hot_sections$sections)
# Within hot tracks, tracks with 9 sections have the highest number
qstr <-
paste0(
"
select artist
, avg(tempo) avg_song_tempo
, COUNT(DISTINCT track) count_songs
from music
group by artist
WHERE hit = 1
HAVING  count_songs >= 10
order by avg_song_tempo desc
limit 10
")
df1 <- dbGetQuery(con, qstr)
qstr <-
paste0(
"
select artist
, avg(tempo) avg_song_tempo
, COUNT(DISTINCT track) count_songs
from music
group by artist
HAVING  count_songs >= 10
order by avg_song_tempo desc
limit 10
")
df1 <- dbGetQuery(con, qstr)
df1
# sections and decade
qstr <- paste0("SELECT sections, decade FROM music")
sections_decade <- dbGetQuery(con, qstr)
sections_decade$decade <- strtoi(substr(sections_decade$decade, 1, 2))
de_60 <- sections_decade[sections_decade$decade == 60, ]
de_70 <- sections_decade[sections_decade$decade == 70, ]
de_80 <- sections_decade[sections_decade$decade == 80, ]
de_90 <- sections_decade[sections_decade$decade == 90, ]
de_00 <- sections_decade[sections_decade$decade == 00, ]
de_10 <- sections_decade[sections_decade$decade == 10, ]
most_section_de <- c(getmode(de_60$sections), getmode(de_70$sections), getmode(de_80$sections), getmode(de_90$sections), getmode(de_00$sections), getmode(de_10$sections))
x_axis <- 1:length(sections_decade$sections)
most_sections_decades <- cbind(unique(sections_decade$decade), most_section_de)
most_sections_decades <- data.frame(most_sections_decades)
colnames(most_sections_decades) <- c("Decades", "Most Common #Sections")
most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
most_sections_decades
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
1:length(most_section_de)
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12)
axis(2, at = 7:12, labels=c("7","8","9","10","11"))
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12, labels=c("7","8","9","10","11"))
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12, labels=c("7","8","9","10","11","12"))
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12)
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12, labels=c("7","8","9","10","11","12"))
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 8:11, labels=c("8","9","10","11"))
# section and energy
qstr <- paste0("SELECT sections, AVG(energy) as average_energy FROM music GROUP BY sections ORDER BY sections")
sections_energy <- dbGetQuery(con, qstr)
se_related <- sections_energy[1:30, ]
plot(se_related$sections, se_related$average_energy, xlab = "sections", ylab = "average energy", type = "l")
# The relationship between sections and average energy in total range
plot(sections_energy$sections, sections_energy$average_energy, xlab = "sections", ylab = "average energy")
plot(se_related$sections, se_related$average_energy, xlab = "sections", ylab = "average energy", type = "l")
# The relationship between sections and average energy in total range
plot(sections_energy$sections, sections_energy$average_energy, xlab = "sections", ylab = "average energy")
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
mean(hot_sections$sections)
# sections and danceability
qstr <- paste0("SELECT sections, AVG(danceability) as average_dance FROM music GROUP BY sections ORDER BY sections")
sections_danceability <- dbGetQuery(con, qstr)
head(sections_danceability)
sd_related = sections_danceability[1:30, ]
plot(se_related$sections, se_related$average_energy, xlab = "sections", ylab = "average energy", type = "l")
# The relationship between sections and average energy in total range
plot(sections_energy$sections, sections_energy$average_energy, xlab = "sections", ylab = "average energy")
# section and energy
qstr <- paste0("SELECT sections, AVG(energy) as average_energy FROM music GROUP BY sections ORDER BY sections")
sections_energy <- dbGetQuery(con, qstr)
se_related <- sections_energy[1:30, ]
# sections and danceability
qstr <- paste0("SELECT sections, AVG(danceability) as average_dance FROM music GROUP BY sections ORDER BY sections")
sections_danceability <- dbGetQuery(con, qstr)
#head(sections_danceability)
#sd_related = sections_danceability[1:30, ]
par(mfrow = c(1,2))
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "average energy", type = "l")
# The relationship between sections and average energy in total range
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
lines(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "average energy", type = "l")
# section and energy
qstr <- paste0("SELECT sections, AVG(energy) as average_energy FROM music GROUP BY sections ORDER BY sections")
sections_energy <- dbGetQuery(con, qstr)
se_related <- sections_energy[1:30, ]
# sections and danceability
qstr <- paste0("SELECT sections, AVG(danceability) as average_dance FROM music GROUP BY sections ORDER BY sections")
sections_danceability <- dbGetQuery(con, qstr)
#head(sections_danceability)
#sd_related = sections_danceability[1:30, ]
par(mfrow = c(1,2))
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
plot(se_related$sections, se_related$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
#head(sections_danceability)
sd_related = sections_danceability[1:30, ]
# sections and danceability
qstr <- paste0("SELECT sections, AVG(danceability) as average_dance FROM music GROUP BY sections ORDER BY sections")
sections_danceability <- dbGetQuery(con, qstr)
#head(sections_danceability)
sd_related = sections_danceability[1:30, ]
sd_related
se_related_energy <- sections_energy[1:30, ]
sd_related_energy <- sections_energy[1:30, ]
#head(sections_danceability)
sd_related_dance = sections_danceability[1:30, ]
plot(se_related$sections, se_related_energy$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
plot(se_related$sections, se_related_dance$average_dance, xlab = "Sections", ylab = "Average Energy", type = "l")
plot(se_related$sections, sd_related_energy$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
plot(se_related$sections, sd_related_dance$average_dance, xlab = "Sections", ylab = "Average Energy", type = "l")
# section and energy
qstr <- paste0("SELECT sections, AVG(energy) as average_energy FROM music GROUP BY sections ORDER BY sections")
sections_energy <- dbGetQuery(con, qstr)
sd_related_energy <- sections_energy[1:30, ]
# sections and danceability
qstr <- paste0("SELECT sections, AVG(danceability) as average_dance FROM music GROUP BY sections ORDER BY sections")
sections_danceability <- dbGetQuery(con, qstr)
#head(sections_danceability)
sd_related_dance = sections_danceability[1:30, ]
par(mfrow = c(1,2))
plot(se_related$sections, sd_related_energy$average_energy, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
plot(se_related$sections, sd_related_dance$average_dance, xlab = "Sections", ylab = "Average Energy", type = "l")
# The relationship between sections and average energy in total range
sd_related$average_energy <- se_related$average_energy
fig <- plot_ly(x = sd_related$sections, y = sd_related$average_energy, z = sd_related$average_dance, type =  "scatter3d", mode = "lines")
library(plotly)
sd_related$average_energy <- se_related$average_energy
fig <- plot_ly(x = sd_related$sections, y = sd_related$average_energy, z = sd_related$average_dance, type =  "scatter3d", mode = "lines")
fig <- fig %>% layout(
title = "Relation between sections and energy&danceability",
scene = list(
xaxis = list(title = "sections"),
yaxis = list(title = "avg_energy"),
zaxis = list(title = "avg_danceability")
))
fig
plot(se_related$average_energy, sd_related$average_dance, xlab = "average energy", ylab = "average danceability")
avgvalue_30section <- data.frame(cbind(se_related$average_energy, sd_related$average_dance))
colnames(avgvalue_30section) <- c("avg_energy", "avg_danceability")
head(avgvalue_30section)
most_section_de <- c(getmode(de_60$sections), getmode(de_70$sections), getmode(de_80$sections), getmode(de_90$sections), getmode(de_00$sections), getmode(de_10$sections))
colnames(most_sections_decades) <- c("Decades", "Most Common Sections")
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 8:11, labels=c("8","9","10","11"))
# sections and decade
qstr <- paste0("SELECT sections, decade FROM music")
sections_decade <- dbGetQuery(con, qstr)
# Libraries
library(RMySQL)
library(knitr)
library(xtable)
library(kableExtra)
library(plotly)
library(RMariaDB)
library(DBI)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
library(tm)
library(wordcloud2)
library(tidytext)
library(htmlwidgets)
library(webshot)
webshot::install_phantomjs()
# Constants
DECADE_ORDER <- c("60s\r", "70s\r", "80s\r", "90s\r", "00s\r", "10s\r")
# Helper functions to get mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
options(xtable.comment = FALSE) #### prevents commenting when printing xtable latex
projpath <- getwd()
if(!exists("xdbsock")) {
xdbsock <- ""
cat("\n",
"Parameter 'xdbsock' not found, setting to empty string for general usage",
"\n")
}
drv <- dbDriver("MySQL") # create driver object
# connect to Jeremy's database
db_host <- Sys.getenv("db_read_endpoint")
db_user <- Sys.getenv("db_read_user")
db_pw   <- Sys.getenv("db_read_password")
db_port <- Sys.getenv("db_read_port")
db_name <- Sys.getenv("db_read_db")
db_drv  <- RMariaDB::MariaDB()
con <- dbConnect(db_drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
dbListTables(con) # see what tables we have
dbGetInfo(con)
# sections and decade
qstr <- paste0("SELECT sections, decade FROM music")
sections_decade <- dbGetQuery(con, qstr)
sections_decade
sections_decade$decade <- strtoi(substr(sections_decade$decade, 1, 2))
sections_decade
sections_decade <- dbGetQuery(con, qstr)
sections_decade
de_60 <- sections_decade[sections_decade$decade == "60s\r", ]
de_70 <- sections_decade[sections_decade$decade == "70s\r", ]
de_80 <- sections_decade[sections_decade$decade == "80s\r", ]
de_90 <- sections_decade[sections_decade$decade == "90s/r", ]
de_00 <- sections_decade[sections_decade$decade == "00s\r", ]
de_10 <- sections_decade[sections_decade$decade == "10s\r", ]
most_section_de <- c(getmode(de_60$sections), getmode(de_70$sections), getmode(de_80$sections), getmode(de_90$sections), getmode(de_00$sections), getmode(de_10$sections))
sections_decade
x_axis
sd_related_energy$average_energy <- sd_related_energy$average_energy
fig <- plot_ly(x = sd_related_energy$sections, y = sd_related_energy$average_energy, z = sd_related_dance$average_dance, type =  "scatter3d", mode = "lines")
fig <- fig %>% layout(
title = "Relation between sections and energy&danceability",
scene = list(
xaxis = list(title = "sections"),
yaxis = list(title = "avg_energy"),
zaxis = list(title = "avg_danceability")
))
fig
fig
sd_related_energy$average_energy <- sd_related_energy$average_energy
fig <- plot_ly(x = sd_related_energy$sections, y = sd_related_energy$average_energy, z = sd_related_dance$average_dance, type =  "scatter3d", mode = "lines")
fig <- fig %>% layout(
title = "Relation between Sections, Energy, and Danceability",
scene = list(
xaxis = list(title = "Sections"),
yaxis = list(title = "Average Energy"),
zaxis = list(title = "Average Danceability")
))
fig
sd_related_energy$average_energy <- sd_related_energy$average_energy
fig <- plot_ly(x = sd_related_energy$sections, y = sd_related_energy$average_energy, z = sd_related_dance$average_dance, type =  "scatter3d", mode = "lines")
fig <- fig %>% layout(
title = "Relation between Sections, Energy, and Danceability",
scene = list(
xaxis = list(title = "Sections"),
yaxis = list(title = "Average Energy"),
zaxis = list(title = "Average Danceability")
))
fig
# sections and decade
qstr <- paste0("SELECT sections, decade FROM music")
sections_decade <- dbGetQuery(con, qstr)
# sections_decade$decade <- strtoi(substr(sections_decade$decade, 1, 2))
de_60 <- sections_decade[sections_decade$decade == "60s\r", ]
de_70 <- sections_decade[sections_decade$decade == "70s\r", ]
de_80 <- sections_decade[sections_decade$decade == "80s\r", ]
de_90 <- sections_decade[sections_decade$decade == "90s/r", ]
de_00 <- sections_decade[sections_decade$decade == "00s\r", ]
de_10 <- sections_decade[sections_decade$decade == "10s\r", ]
most_section_de <- c(getmode(de_60$sections), getmode(de_70$sections), getmode(de_80$sections), getmode(de_90$sections), getmode(de_00$sections), getmode(de_10$sections))
#x_axis <- 1:length(sections_decade$sections)
most_sections_decades <- cbind(unique(sections_decade$decade), most_section_de)
most_sections_decades <- data.frame(most_sections_decades)
colnames(most_sections_decades) <- c("Decades", "Most Common Sections")
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12, labels=c("7","8","9","10","11","12"))
# Most negatively correlated with danceability
c1 <- danceable %>% ggplot(aes(acousticness, danceability)) + geom_jitter(color = "red", alpha = 0.3) + geom_smooth(color = "black")
c2 <- danceable %>% ggplot(aes(instrumentalness, danceability)) + geom_jitter(color = "orange", alpha = 0.3) + geom_smooth(color = "black")
# Most positively correlated with danceabiity
c3 <- danceable %>% ggplot(aes(loudness, danceability)) + geom_jitter(color = "blue", alpha = 0.3) + geom_smooth(color = 'black') + theme_minimal()
c4 <- danceable %>% ggplot(aes(valence, danceability)) + geom_jitter(color = "purple", alpha = 0.3) + geom_smooth(color = 'black')
ggpubr::ggarrange(c1, c2,c3,c4)
# Most negatively correlated with danceability
c1 <- danceable %>% ggplot(aes(acousticness, danceability)) + geom_jitter(color = "red", alpha = 0.3) + geom_smooth(color = "black") + theme_void()
c2 <- danceable %>% ggplot(aes(instrumentalness, danceability)) + geom_jitter(color = "orange", alpha = 0.3) + geom_smooth(color = "black") + theme_void()
# Most positively correlated with danceabiity
c3 <- danceable %>% ggplot(aes(loudness, danceability)) + geom_jitter(color = "blue", alpha = 0.3) + geom_smooth(color = 'black') + theme_void()
c4 <- danceable %>% ggplot(aes(valence, danceability)) + geom_jitter(color = "purple", alpha = 0.3) + geom_smooth(color = 'black') + theme_void()
ggpubr::ggarrange(c1, c2,c3,c4)
# Most negatively correlated with danceability
c1 <- danceable %>% ggplot(aes(acousticness, danceability)) + geom_jitter(color = "red", alpha = 0.3) + geom_smooth(color = "black") + theme_minimal()
c2 <- danceable %>% ggplot(aes(instrumentalness, danceability)) + geom_jitter(color = "orange", alpha = 0.3) + geom_smooth(color = "black") + theme_void()
# Most positively correlated with danceabiity
c3 <- danceable %>% ggplot(aes(loudness, danceability)) + geom_jitter(color = "blue", alpha = 0.3) + geom_smooth(color = 'black') + theme_light()
c4 <- danceable %>% ggplot(aes(valence, danceability)) + geom_jitter(color = "purple", alpha = 0.3) + geom_smooth(color = 'black') + theme_void()
ggpubr::ggarrange(c1, c2,c3,c4)
# Hot-100 tracks
qstr <- paste0("SELECT track, sections FROM music WHERE hit = 1 ")
hot_sections <- dbGetQuery(con, qstr)
head(hot_sections)
hist(hot_sections$sections, main = "Histgram of hot #sections", xlab = "Number of sections")
getmode(hot_sections$sections)
# Within hot tracks, tracks with 9 sections have the highest number
# sections and decade
qstr <- paste0("SELECT sections, decade FROM music")
sections_decade <- dbGetQuery(con, qstr)
sections_decade$decade <- strtoi(substr(sections_decade$decade, 1, 2))
de_60 <- sections_decade[sections_decade$decade == 60, ]
de_70 <- sections_decade[sections_decade$decade == 70, ]
de_80 <- sections_decade[sections_decade$decade == 80, ]
de_90 <- sections_decade[sections_decade$decade == 90, ]
de_00 <- sections_decade[sections_decade$decade == 00, ]
de_10 <- sections_decade[sections_decade$decade == 10, ]
most_section_de <- c(getmode(de_60$sections), getmode(de_70$sections), getmode(de_80$sections), getmode(de_90$sections), getmode(de_00$sections), getmode(de_10$sections))
#x_axis <- 1:length(sections_decade$sections)
most_sections_decades <- cbind(unique(sections_decade$decade), most_section_de)
most_sections_decades <- data.frame(most_sections_decades)
colnames(most_sections_decades) <- c("Decades", "Most Common Sections")
# most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of Sections", xaxt = "n", yaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
axis(2, at = 7:12, labels=c("7","8","9","10","11","12"))
knitr::opts_chunk$set(echo = TRUE)
# sections and decade
qstr <- paste0("SELECT sections, decade FROM music")
sections_decade <- dbGetQuery(con, qstr)
sections_decade$decade <- strtoi(substr(sections_decade$decade, 1, 2))
de_60 <- sections_decade[sections_decade$decade == 60, ]
de_70 <- sections_decade[sections_decade$decade == 70, ]
de_80 <- sections_decade[sections_decade$decade == 80, ]
de_90 <- sections_decade[sections_decade$decade == 90, ]
de_00 <- sections_decade[sections_decade$decade == 00, ]
de_10 <- sections_decade[sections_decade$decade == 10, ]
most_section_de <- c(getmode(de_60$sections), getmode(de_70$sections), getmode(de_80$sections), getmode(de_90$sections), getmode(de_00$sections), getmode(de_10$sections))
x_axis <- 1:length(sections_decade$sections)
most_sections_decades <- cbind(unique(sections_decade$decade), most_section_de)
most_sections_decades <- data.frame(most_sections_decades)
colnames(most_sections_decades) <- c("Decades", "Most Common #Sections")
most_sections_decades
plot(1:length(most_section_de), most_section_de, type = "l", xlab = "Decades", ylab = "Number of sections", xaxt = "n")
axis(1, at=1:length(most_section_de), labels=c("60s", "70s", "80s", "90s", "00s", "10s"))
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
# Libraries
library(RMySQL)
library(knitr)
library(xtable)
library(kableExtra)
library(plotly)
library(RMariaDB)
library(DBI)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
library(tm)
library(wordcloud2)
library(tidytext)
library(htmlwidgets)
library(webshot)
webshot::install_phantomjs()
# Constants
DECADE_ORDER <- c("60s\r", "70s\r", "80s\r", "90s\r", "00s\r", "10s\r")
# Helper functions to get mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
options(xtable.comment = FALSE) #### prevents commenting when printing xtable latex
projpath <- getwd()
if(!exists("xdbsock")) {
xdbsock <- ""
cat("\n",
"Parameter 'xdbsock' not found, setting to empty string for general usage",
"\n")
}
drv <- dbDriver("MySQL") # create driver object
# connect to Jeremy's database
db_host <- Sys.getenv("db_read_endpoint")
db_user <- Sys.getenv("db_read_user")
db_pw   <- Sys.getenv("db_read_password")
db_port <- Sys.getenv("db_read_port")
db_name <- Sys.getenv("db_read_db")
db_drv  <- RMariaDB::MariaDB()
con <- dbConnect(db_drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
dbListTables(con) # see what tables we have
dbGetInfo(con)
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
dbGetInfo(con)
dbListTables(con) # see what tables we have
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
dbGetQuery(con, "SELECT * FROM dataDictionary")
dbListTables(con) # see what tables we have
yy <- dbGetQuery(con, "SELECT * FROM music")
yy
dbListTables(con) # see what tables we have
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
con <- dbConnect\ user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
con <- dbConnect() user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
con <- dbConnect( user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
con <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
drv <- dbDriver("MySQL") # create driver object
con <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
db_host <- Sys.getenv("db_read_endpoint")
db_user <- Sys.getenv("db_read_user")
db_pw   <- Sys.getenv("db_read_password")
db_port <- Sys.getenv("db_read_port")
db_name <- Sys.getenv("db_read_db")
con <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
yy <- dbGetQuery(con, "SELECT * FROM music")
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
yy <- dbGetQuery(con, "SHOW COLUMNS FROM dataDictionary")
yy
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
df <- dbGetQuery(con, "SHOW COLUMNS FROM dataDictionary")
df
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
writeLines(dbGetQuery(con, "SELECT * FROM dataDictionary")[ 2, "variableDefs"], file.path("~", "Desktop", "DataDictionary.json"))
dbGetQuery(con, "select CAST(JSON_EXTRACT(*,'$[0].os') as CHAR) from dataDictionary")
yy <- dbGetQuery(con, "SELECT * FROM dataDictionary")
drv <- dbDriver("MySQL") # create driver object
con <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
# connect to Jeremy's database
db_host <- Sys.getenv("db_read_endpoint")
db_user <- Sys.getenv("db_read_user")
db_pw   <- Sys.getenv("db_read_password")
db_port <- Sys.getenv("db_read_port")
db_name <- Sys.getenv("db_read_db")
db_name
db_host
db_pw
db_port
connn <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
drv <- dbDriver("MySQL") # create driver object
connn <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
connn <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port, unix.sock=xdbsock)
connn <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=db_port)
db_port
connn <- dbConnect(drv, user=db_user, password=db_pw, dbname=db_name, host=db_host, port=3306)
df <- dbGetQuery(connn, "SHOW COLUMNS FROM dataDictionary")
yy <- dbGetQuery(connn, "SELECT * FROM dataDictionary")
writeLines(yy[ 2, "variableDefs"], file.path("~", "Desktop", "DataDictionary.json"))
writeLines(yy[ 1, "variableDefs"], file.path("~", "Desktop", "DataDictionary.json"))
